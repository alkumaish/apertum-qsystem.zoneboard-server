/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FAdmin.java
 *
 * Created on 29.06.2010, 15:48:00
 */
package ru.apertum.qsystem.zoneboard.form;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.xml.bind.JAXBException;
import ru.apertum.qsystem.zoneboard.ZoneServerProperty;
import ru.apertum.qsystem.zoneboard.Run;
import ru.apertum.qsystem.zoneboard.WindowProperty;
import ru.apertum.qsystem.zoneboard.common.Uses;

/**
 *
 * @author egorov
 */
public class FAdmin extends javax.swing.JFrame {

    static private ZoneServerProperty props;
    final static private JComboBox<Integer> cb = new JComboBox<>();
    final static private TableCellEditor editor = new DefaultCellEditor(cb);
    
    static {
        cb.addItem(1);
        cb.addItem(2);
        cb.addItem(3);
        cb.addItem(4);
        cb.addItem(5);
        cb.addItem(6);
        cb.addItem(7);
    }
    

    /** Creates new form FAdmin */
    public FAdmin(ZoneServerProperty property) {
        initComponents();
        setTitle("Управление зональными табло");
        table.setModel(new AdminTableModel(property));
        setEditorMonNum();
        table.setRowHeight(30);
        Run.refreshWindowsTitle();
    }
    
    private void setEditorMonNum(){
        final TableColumnModel cm = table.getColumnModel();
        final TableColumn tc = cm.getColumn(table.getColumnCount()-1);
        tc.setCellEditor(editor);
    }

    public FAdmin() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonAddZone = new javax.swing.JButton();
        buttonDeleteZone = new javax.swing.JButton();
        buttonAddTablo = new javax.swing.JButton();
        buttonDeleteTablo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        table.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setName("table"); // NOI18N
        table.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(table);

        buttonAddZone.setText("Добавить зону");
        buttonAddZone.setName("buttonAddZone"); // NOI18N
        buttonAddZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddZoneActionPerformed(evt);
            }
        });

        buttonDeleteZone.setText("Удалить зону");
        buttonDeleteZone.setName("buttonDeleteZone"); // NOI18N
        buttonDeleteZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteZoneActionPerformed(evt);
            }
        });

        buttonAddTablo.setText("Добавить табло");
        buttonAddTablo.setName("buttonAddTablo"); // NOI18N
        buttonAddTablo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddTabloActionPerformed(evt);
            }
        });

        buttonDeleteTablo.setText("Удалить табло");
        buttonDeleteTablo.setName("buttonDeleteTablo"); // NOI18N
        buttonDeleteTablo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteTabloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonAddTablo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDeleteTablo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 306, Short.MAX_VALUE)
                .addComponent(buttonAddZone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDeleteZone)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDeleteZone)
                    .addComponent(buttonAddZone)
                    .addComponent(buttonAddTablo)
                    .addComponent(buttonDeleteTablo))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddZoneActionPerformed
        final String zoneName = (String) JOptionPane.showInputDialog(this, "Введите название зоны", "Название зоны", 3, null, null, "Зона");
        if (zoneName == null) {
            return;
        }
        if ("".equals(zoneName)) {
            JOptionPane.showConfirmDialog(this, "Название не должно быть пустым.", "Недопустимое значение", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (ZoneServerProperty.Zone z : props.getZoneList()) {
            if (z.getName().equalsIgnoreCase(zoneName)) {
                JOptionPane.showConfirmDialog(this, "Зона с таким названием уже существует.", "Недопустимое значение", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        String res = (String) JOptionPane.showInputDialog(this, "Введите номер зоны", "Номер зоны", 3, null, null, 1);
        if (res == null) {
            return;
        }

        if (!res.matches("^-?\\d+$")) {
            JOptionPane.showConfirmDialog(this, "Требуется ввести натуральное число.", "Недопустимое значение", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        final Integer zone = Integer.parseInt(res);

        for (ZoneServerProperty.Zone z : props.getZoneList()) {
            if (z.getZone().equals(zone)) {
                JOptionPane.showConfirmDialog(this, "Зона с таким номером уже существует.", "Недопустимое значение", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        props.getZoneList().add(new ZoneServerProperty.Zone(zoneName, zone));

        ((AdminTableModel) table.getModel()).fireTableStructureChanged();
        setEditorMonNum();
    }//GEN-LAST:event_buttonAddZoneActionPerformed

    private void buttonAddTabloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddTabloActionPerformed
        final String tabloName = (String) JOptionPane.showInputDialog(this, "Введите название табло", "Название табло", 3, null, null, "Табло");
        if (tabloName == null) {
            return;
        }
        if ("".equals(tabloName)) {
            JOptionPane.showConfirmDialog(this, "Название не должно быть пустым.", "Недопустимое значение", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (WindowProperty p : props.windows) {
            if (p.getName().equalsIgnoreCase(tabloName)) {
                JOptionPane.showConfirmDialog(this, "Табло с таким названием уже существует.", "Недопустимое значение", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        final WindowProperty p = new WindowProperty();
        p.setName(tabloName);
        p.setDisplay(1);
        props.windows.add(p);

        ((AdminTableModel) table.getModel()).fireTableDataChanged();
    }//GEN-LAST:event_buttonAddTabloActionPerformed

    private void buttonDeleteTabloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteTabloActionPerformed
        final String[] st = new String[props.windows.size()];
        int i = 0;
        for (WindowProperty p : props.windows) {
            st[i++] = p.getName();
        }
        final String tabloName = (String) JOptionPane.showInputDialog(this, "Удаление табло", "Выберите табло", 3, null, st, st[0]);
        if (tabloName == null) {
            return;
        }
        for (WindowProperty p : props.windows) {
            if (p.getName().equalsIgnoreCase(tabloName)) {
                props.windows.remove(p);
                ((AdminTableModel) table.getModel()).fireTableDataChanged();
                return;
            }
        }

    }//GEN-LAST:event_buttonDeleteTabloActionPerformed

    private void buttonDeleteZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteZoneActionPerformed
        final String[] st = new String[props.getZoneList().size()];
        int i = 0;
        for (ZoneServerProperty.Zone z : props.getZoneList()) {
            st[i++] = z.getName();
        }
        final String zoneName = (String) JOptionPane.showInputDialog(this, "Удаление зоны", "Выберите зону", 3, null, st, st[0]);
        if (zoneName == null) {
            return;
        }
        for (ZoneServerProperty.Zone z : props.getZoneList()) {
            if (z.getName().equalsIgnoreCase(zoneName)) {
                for (WindowProperty p : props.windows) {
                    for (Integer zone : p.getZones()) {
                        if (zone.equals(z.getZone())) {
                            p.getZones().remove(zone);
                            break;
                        }
                    }
                }
                props.getZoneList().remove(z);
                ((AdminTableModel) table.getModel()).fireTableStructureChanged();
                setEditorMonNum();
                return;
            }
        }
    }//GEN-LAST:event_buttonDeleteZoneActionPerformed

    /**
     * JOptionPane.showMessageDialog(this, "Обновление завершено успешно.", "Обновление", JOptionPane.INFORMATION_MESSAGE);
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {
        Uses.isDebug = Uses.setLogining(args);
        final InputStream insProp;
        if (args.length != 0) {
            final File f = new File(args[0]);
            if (f.exists()) {
                insProp = new FileInputStream(f);
                Run.filePropName = args[0];
            } else {
                throw new FileNotFoundException("Not found the configuration file config.xml in first parameter path: " + args[0]);
            }
        } else {
            final File f = new File("config/config.xml");
            if (f.exists()) {
                insProp = new FileInputStream(f);
                Run.filePropName = "config/config.xml";
            } else {
                throw new FileNotFoundException("Not found the configuration file config.xml in current directory.");
            }
        }
        try {
            props = ZoneServerProperty.unmarshal(insProp);
        } catch (JAXBException ex) {
            throw new Uses.SilentException(ex.toString());
        }


        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                final FAdmin form = new FAdmin(props);
                Uses.setLocation(form);
                form.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddTablo;
    private javax.swing.JButton buttonAddZone;
    private javax.swing.JButton buttonDeleteTablo;
    private javax.swing.JButton buttonDeleteZone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
